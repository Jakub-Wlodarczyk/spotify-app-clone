// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SinglePlaylist component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SinglePlaylist
    playlist={
      Object {
        "name": "playlist",
        "songs": Array [
          "song1",
          "song2",
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          <b>
            Playlist name:
          </b>
           
          playlist
        </p>,
        <p>
          <b>
            Songs:
          </b>
        </p>,
        Array [
          <span>
            song1
             | 
          </span>,
          <span>
            song2
             | 
          </span>,
        ],
      ],
      "className": "single-song",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <b>
              Playlist name:
            </b>,
            " ",
            "playlist",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Playlist name:",
            },
            "ref": null,
            "rendered": "Playlist name:",
            "type": "b",
          },
          " ",
          "playlist",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <b>
            Songs:
          </b>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Songs:",
          },
          "ref": null,
          "rendered": "Songs:",
          "type": "b",
        },
        "type": "p",
      },
      Object {
        "instance": null,
        "key": "song1",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "song1",
            " | ",
          ],
        },
        "ref": null,
        "rendered": Array [
          "song1",
          " | ",
        ],
        "type": "span",
      },
      Object {
        "instance": null,
        "key": "song2",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "song2",
            " | ",
          ],
        },
        "ref": null,
        "rendered": Array [
          "song2",
          " | ",
        ],
        "type": "span",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <b>
              Playlist name:
            </b>
             
            playlist
          </p>,
          <p>
            <b>
              Songs:
            </b>
          </p>,
          Array [
            <span>
              song1
               | 
            </span>,
            <span>
              song2
               | 
            </span>,
          ],
        ],
        "className": "single-song",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <b>
                Playlist name:
              </b>,
              " ",
              "playlist",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Playlist name:",
              },
              "ref": null,
              "rendered": "Playlist name:",
              "type": "b",
            },
            " ",
            "playlist",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <b>
              Songs:
            </b>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Songs:",
            },
            "ref": null,
            "rendered": "Songs:",
            "type": "b",
          },
          "type": "p",
        },
        Object {
          "instance": null,
          "key": "song1",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "song1",
              " | ",
            ],
          },
          "ref": null,
          "rendered": Array [
            "song1",
            " | ",
          ],
          "type": "span",
        },
        Object {
          "instance": null,
          "key": "song2",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "song2",
              " | ",
            ],
          },
          "ref": null,
          "rendered": Array [
            "song2",
            " | ",
          ],
          "type": "span",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
