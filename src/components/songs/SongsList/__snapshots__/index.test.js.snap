// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SingleSong component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SongsList
    dispatch={[Function]}
    playlists={
      Array [
        Object {
          "name": "playlist",
          "songs": Array [
            "song1",
            "song2",
          ],
        },
      ]
    }
    songs={
      Array [
        Object {
          "author": "author 1",
          "duration": "4:30",
          "title": "title 1",
        },
        Object {
          "author": "author 1",
          "duration": "4:30",
          "title": "title 1",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <SingleSong
          dispatch={[Function]}
          playlists={
            Array [
              Object {
                "name": "playlist",
                "songs": Array [
                  "song1",
                  "song2",
                ],
              },
            ]
          }
          song={
            Object {
              "author": "author 1",
              "duration": "4:30",
              "title": "title 1",
            }
          }
        />,
        <SingleSong
          dispatch={[Function]}
          playlists={
            Array [
              Object {
                "name": "playlist",
                "songs": Array [
                  "song1",
                  "song2",
                ],
              },
            ]
          }
          song={
            Object {
              "author": "author 1",
              "duration": "4:30",
              "title": "title 1",
            }
          }
        />,
      ],
      "className": "songs-list",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "title 1",
        "nodeType": "class",
        "props": Object {
          "dispatch": [Function],
          "playlists": Array [
            Object {
              "name": "playlist",
              "songs": Array [
                "song1",
                "song2",
              ],
            },
          ],
          "song": Object {
            "author": "author 1",
            "duration": "4:30",
            "title": "title 1",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "title 1",
        "nodeType": "class",
        "props": Object {
          "dispatch": [Function],
          "playlists": Array [
            Object {
              "name": "playlist",
              "songs": Array [
                "song1",
                "song2",
              ],
            },
          ],
          "song": Object {
            "author": "author 1",
            "duration": "4:30",
            "title": "title 1",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <SingleSong
            dispatch={[Function]}
            playlists={
              Array [
                Object {
                  "name": "playlist",
                  "songs": Array [
                    "song1",
                    "song2",
                  ],
                },
              ]
            }
            song={
              Object {
                "author": "author 1",
                "duration": "4:30",
                "title": "title 1",
              }
            }
          />,
          <SingleSong
            dispatch={[Function]}
            playlists={
              Array [
                Object {
                  "name": "playlist",
                  "songs": Array [
                    "song1",
                    "song2",
                  ],
                },
              ]
            }
            song={
              Object {
                "author": "author 1",
                "duration": "4:30",
                "title": "title 1",
              }
            }
          />,
        ],
        "className": "songs-list",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "title 1",
          "nodeType": "class",
          "props": Object {
            "dispatch": [Function],
            "playlists": Array [
              Object {
                "name": "playlist",
                "songs": Array [
                  "song1",
                  "song2",
                ],
              },
            ],
            "song": Object {
              "author": "author 1",
              "duration": "4:30",
              "title": "title 1",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "title 1",
          "nodeType": "class",
          "props": Object {
            "dispatch": [Function],
            "playlists": Array [
              Object {
                "name": "playlist",
                "songs": Array [
                  "song1",
                  "song2",
                ],
              },
            ],
            "song": Object {
              "author": "author 1",
              "duration": "4:30",
              "title": "title 1",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
